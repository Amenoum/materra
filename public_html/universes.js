/*
* this is mainly used for constants
* you can modify existing or add new constants here in universes.earth.constants (SETTINGS_CONST below)
* these can then be used in <c> tag, ie.:
*	<c>2 * const('pi')</c>
*	<c>const('self.mass.electrons.neptune.1', false, 1e24, 3)</c>
*
* const function has 4 optional parameters: const(str, showunit=true, divider=1, round=-1, html=false)
*	str	= string				// constant name
*	showunit = boolean			// append unit to value (ie. 'kg')
*	divider = number			// divides the constant by this number
*	round = int					// rounds the constant to specified number of decimals (-1 = no rounding)
*	html = boolean				// uses html for exponents (ie. 10^24 => 10<sup>24</sup>)
*
* you can also modify the universes.0 (SETTINGS_INIT section below) to set the title of the universum (website) and default author(s) which can then be printed using author tag:
*	<author />
*
* Make sure not to break the code, check the console (F12) if the page does not load.
*
* NOTE: I recommend extending this with a plugin and adding constants there, instead of modifying this file.
*
*/

var universes = {
	current: 0,
	aliases: { 'solar': ['solar_system'] },
	
	/******** SETTINGS_INIT: BEGIN ********/
	0: {
		id: 'Amenoum',							// title of the local universum (website)
		subtitle: 'universum γνωστικʊm',		// subtitle
		authors: ['Amenoum'],					// list of default authors, these can be names or ids, if id is used and defined below (as universes.id, ie. universes.Amenoum) a link to author will be generated
		anno: ['anno incarnati &beta; 33'],		// if not empty, this will be appended to the list of authors
		payment: {								// this is used on 'pay' command
			title: 'Bitcoin (BTC)',				// title of payment currency
			address: 'bc1qxh3lya3ruzzrrljhrrng0sew7ledhyv8dqalnl',	// payment address
			direct_link: 'https://blockchain.com/btc/payment_request?address=bc1qxh3lya3ruzzrrljhrrng0sew7ledhyv8dqalnl&amount=%VAL%&message=Amenoum.'	// direct link to payment, use %VAL% as a placeholder for payment amount
		}
	},
	Amenoum: {								// author definition (id = Amenoum)
		//name: 'Jeshua Christophorus',		// if name is not defined, id will be printed by <author />
		//url: 'https://author.com'			// if not defined, a local link will be autogenerated like this: /authors/id.html	(ie. /authors/Amenoum.html)
	},
	/******** SETTINGS_INIT: END **********/

	/*
	milky_way: {
		title: 'Milky way',
		children: ['solar']
	},
	carbon: {
		isotopes: {
			species: {
				cancer: {
					synonyms: ['humanity']
				}
			}
		}
	},
	sirius_a: {
		parents: ['sirius'],
		children: ['up'],
		species: 'hydrogen',		// more likely oxygen, but who needs this
		relationship: {
			type: 'mol',			// covalent
			partners: ['sirius_b']	// 2H?
		}
	},
	sirius_b: {
		parents: ['sirius'],
		children: ['down'],
		species: 'hydrogen',		// needs checking
		relationship: {
			type: 'mol',
			partners: ['sirius_a']	// 2H?
		}			
	},
	sirius: {
		species: 'hydrogen',
		children: ['sirus_a', 'sirius_b'],
		relationship: {
			type: 'mol',
			partners: ['solar']		// CH2? not
		},
		charge: {
			polarity: +1,
			amount: 1/3
		}
	},
	*/
	solar: {
		/* begin_mass = mass at the start of cycle
		   mass = mass at the middle of cycle
		   end_mass = mass at the end of cycle
		   cycles are not round-robin, only the middle is stable, first and last are a collapse (contraction and expansion overlap)
		   solar system period = 3, due to milky way current state - Lithium (3p6n <-> 6p3n)
		   the overlap is due to cycling of the host (milky way for the ss, ss for the earth)
		*/
		title: 'Solar system',
		parents: ['milky_way'],
		children: ['mercury', 'venus', 'earth', 'mars', 'jupiter', 'saturn', 'uranus', 'neptune'],
		standard_proton : { mass: 6, begin_mass: 5, end_mass: 4 },
		standard_neutron : { mass: 4, begin_mass: 5, end_mass: 6 },
		nucleons : { mass: null },
		species: 'carbon.isotope.10',
		/*
		relationship: {				// possible future/past relationship
			type: 'mol',
			partners: ['sirius']	// CO2?
		},*/
		charge: {
			polarity: -1,
			amount: 2/3,
		},
		init: function() {
			this.nucleons.mass = this.standard_proton.mass + this.standard_neutron.mass;
			universes.earth.init();
		}
	},
	jupiter: {
		up: {},	// former Sirius child?
		down: {}
	},
	earth: {
		parents: ['solar_system'],
		title: 'Earth',
		type: 'electron',
		scale: 3,
		cycles: [],
		begin_mass: 0,
		mass: 0,
		end_mass: 0,
		constants: {
			
			/******** SETTINGS_CONST: BEGIN ********/
			pi: Math.PI,
			c: 2.99792458e8,
			self: {	// spin momentum
				radius: {	// volumetric mean radius (m)
					unit: 'm',
					electrons: {
						jupiter: {
							1: 69911e3
						},
						saturn: {
							1: 58232e3
						},
						uranus: {
							1: 25362e3
						},
						neptune: {
							1: 24622e3
						}
					},
					positrons: {
						mercury: {
							1: 2439.7e3
						},
						venus: {
							1: 6051.8e3
						},
						earth: {
							1: 6371.0e3
						},
						mars: {
							1: 3389.5e3
						}
					},					
					equatorial: {
						electrons: {
							jupiter: {
								1: 71492e3
							},
							saturn: {
								1: 60268e3
							},
							uranus: {
								1: 25559e3
							},
							neptune: {
								1: 24764e3
							}
						},
						positrons: {
							mercury: {
								1: 2439.7e3
							},
							venus: {
								1: 6051.8e3
							},
							earth: {
								1: 6378.137e3
							},
							mars: {
								1: 3396.2e3
							}
						}
					}
				},
				velocity: {	// mean (m/s)
					unit: 'm/s',
					electrons: {
						neptune: {
							1: 2.66e3
						}
					}
				},
				mass: {		// img mass (kg) = sum of all angular v/r of self (should include moons)
					unit: 'kg',
					electrons: {
						jupiter: {
							1: 1898.19e24
						},
						saturn: {
							1: 568.34e24
						},
						uranus: {
							1: 86.813e24
						},
						neptune: {
							1: 102.413e24
						}
					},
					positrons: {
						mercury: {
							1: 0.33011e24
						},
						venus: {
							1: 4.8675e24
						},
						earth: {
							1: 5.9723e24
						},
						mars: {
							1: 0.64171e24
						}
					}
				},
				energy: {	// rest energy (relative to Earth orbital momentum), used as invariant quantity, m,c thus need to adjust
					unit: 'eV',
					electron: 0.5109989461e6,
					proton: 938.2720813e6,
					neutron: 939.5654133e6
				}
			},
			orbital: {
				radius: {	// semi-major axis (m)
					unit: 'm',
					electrons: {
						jupiter: {
							1: 778.57e9
						},
						saturn: {
							1: 1433.53e9
						},
						uranus: {
							1: 2872.46e9
						},
						neptune: {
							1: 4495.06e9
						}
					},
					positrons: {
						mercury: {
							1: 57.91e9
						},
						venus: {
							1: 108.21e9
						},
						earth: {
							1: 149.6e9
						},
						mars: {
							1: 227.92e9
						}
					}
				},
				velocity: {	// mean (m/s)
					unit: 'm/s',
					electrons: {
						jupiter: {
							1: 13.06e3
						},
						saturn: {
							1: 9.68e3
						},
						uranus: {
							1: 6.80e3
						},
						neptune: {
							1: 5.43e3
						}
					},
					positrons: {
						mercury: {
							1: 47.36e3
						},
						venus: {
							1: 35.02e3
						},
						earth: {
							1: 29.78e3
						},
						mars: {
							1: 24.07e3
						}
					}
				}
			},
			ionization: {
				unit: 'eV',	// used as invariant quantity, m,c thus need to adjust
				carbon: {	// https://physics.nist.gov/PhysRefData/ASD/ionEnergy.html
					jupiter: 489.993194,	// theoretical
					jupiter2: 392.090515,	// extrapolated
					saturn: 64.49352,
					saturn2: 47.88778,
					uranus: 24.383154,
					neptune: 11.2602880
				}
			},
			convert: {
				kg: {
					eV: function(val, c = 2.99792458e8) {	// kg to eV
						var e = 1.60217662e-19;
						//var x = 5.609588650e35;
						var x = pow(c, 2) / e;
						return x*val;
					}
				}
			}
			/******** SETTINGS_CONST: END **********/
			
		},
		init: function() {
			this.begin_mass = this.scale * Math.pow(universes.solar_system.nucleons.mass, -universes.solar_system.standard_proton.end_mass);
			this.mass = this.scale * Math.pow(universes.solar_system.nucleons.mass, -universes.solar_system.standard_proton.mass);
			this.end_mass = this.scale * Math.pow(universes.solar_system.nucleons.mass, -universes.solar_system.standard_proton.begin_mass);
			var max_years = (1 / this.scale) * universes.solar_system.standard_proton.mass * Math.pow(universes.solar_system.nucleons.mass, this.scale) + this.scale * universes.solar_system.nucleons.mass;
			var i = max_years, j = universes.solar_system.standard_proton.mass;
			while (j--) {
				this.cycles.push(i);
				i *= -1 / this.scale;
			}
			//console.log(this);
		}
	},	// END OF earth
	
	author: function(universe = null) {
		if (universe === null) universe = this.current;
		var out = '';
		$(this[universe].authors).each(function(idx) {
			out += (out==''?'':(this!='et al'?', ':' '))+(universes.exists(this)?(typeof(universes[this].url) != 'undefined'?universes[this].url:'/authors/'+this+'.html').toURL(universes.get(this, true, true)):this);
		});
		return out;
	},
	anno: function(universe = null) {
		if (universe === null) universe = this.current;
		var out = '';
		$(this[universe].anno).each(function(idx) {
			out += (out==''?'':(this!='-'?', ':' '))+this;
		});
		if (out.length < 1) return false;
		return out+'.';
	},
	reflectProperties: function(str, ret_arr = false) {
		if (str.indexOf('.') < 0) return str;
		var tmp = str.split('.'), tmp2 = (ret_arr?[]:'');
		$(tmp).each(function (idx) {
			if (ret_arr)
				tmp2.unshift(this);
			else
				tmp2 = this + (tmp2!=''?'.'+tmp2:'');
		});
		return tmp2;
	},
	exists: function(universe) {
		if (universe.indexOf('.') >= 0) {
			var inv = this.reflectProperties(universe, true), obj = this;
			$(inv).each(function (idx) {
				obj = obj[this];
			});
			return (typeof(obj) != 'undefined');
		}
		return (typeof(this[universe]) != 'undefined');
	},
	get: function(universe, ret_name = false, ret_full_name = false) {
		if (universe.indexOf('.') >= 0) {
			var inv = this.reflectProperties(universe, true), obj = this, ret = '', tmp, tmp2 = '';
			var inv_cnt = inv.length;
			$(inv).each(function (idx) {
				obj = obj[this];
				tmp = this;
				if (idx < inv_cnt-1) tmp2 += (tmp2!=''?'.':'')+this;
			});
			ret = (ret_name?(typeof(obj.name) != 'undefined'?obj.name:tmp)+(ret_full_name?'@'+tmp2:''):obj);
			return ret;
		}
		return (ret_name?(typeof(this[universe]) != 'undefined' && typeof(this[universe].name) != 'undefined'?this[universe].name:universe):this[universe]);
	},
	init: function() {
		for (var key in this.aliases) {
			$(this.aliases[key]).each(function(idx) {
				universes[this] = universes[key];
			});
		}
	}
};
